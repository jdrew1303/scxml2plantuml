.macro output_action(id, action)
.           for my.action.script
$(my.id) : $(string.trim (script.))
.           endfor
.           for my.action.send
$(my.id) : send: $(send.event)
.           endfor
.           for my.action.assign
$(my.id) : $(assign.location) = $(assign.expr)
.           endfor
.endmacro
.
.macro output_actions (state)
.   if defined (my.state->onenter)
$(my.state.id) : **entry /** 
.       for my.state.onenter
.           output_action (my.state.id, onenter)    
.       endfor
.   endif
.   if defined (my.state->onexit)
$(my.state.id) : **exit /** 
.       for my.state.onexit
.           output_action (my.state.id, onexit) 
.       endfor
.   endif
.endmacro
.
.
.macro output_transitions (state, transition)
.   if defined (my.transition.target)
    $(my.state.id) --> $(my.transition.target) : \
.   else
    $(my.state.id) --> $(my.state.id) : \
.   endif
.
.   if defined (my.transition.event)
[$(my.transition.event)] \
.   endif
.   if defined (my.transition.event) & defined (my.transition.cond)
& \\n\
.   endif
.   if defined (my.transition.cond)
[$(my.transition.cond)] \
.   endif
.   if defined (my.transition->script) | defined (my.transition->send) | defined (my.transition->assign)
/ \
.   endif
.   for my.transition.script
$(string.trim (script.)) \\n \
.   endfor
.   for my.transition.send
send: $(send.event) \\n \
.   endfor
.   for my.transition.assign
$(assign.location) = $(assign.expr) \\n \
.   endfor

.endmacro
.
.macro output_state (state, is_pp)
.   if defined (my.state->state)
state $(my.state.id) {
.       output_actions (state)
.       if defined (my.state->initial)
    [*] -> $(my.state->initial->transition.target)
.       elsif defined (my.state.initial)
    [*] -> $(my.state.initial)
.       endif
.       for my.state.transition
.           output_transitions (my.state, transition)

.       endfor
.       if (my.is_pp)
.           for my.state.state
.               output_parallel (state, 0)
.           endfor
.           for my.state.parallel
.               output_parallel (parallel, 1)
.           endfor
.       else
.           for my.state.state
.               output_state (state, 0)
.           endfor
.           for my.state.parallel
.               output_state (parallel, 1)
.           endfor
.       endif
}

.   else
.       output_actions (state)
.       for my.state.transition
.           output_transitions (my.state, transition)

.       endfor
.   endif
.endmacro
.
.macro output_parallel (state, is_pp)
.   if defined (my.state->state)
note "$(my.state.id)" as $(MY.STATE.ID)
.       output_actions (state)
.       if defined (my.state->initial)
    [*] -> $(my.state->initial->transition.target)
.       elsif defined (my.state.initial)
    [*] -> $(my.state.initial)
.       endif
.       for my.state.transition
.           output_transitions (my.state, transition)

.       endfor
.       if (my.is_pp)
.           for my.state.state
.               output_parallel (state, 0)
.           endfor
.           for my.state.parallel
.               output_parallel (parallel, 1)
.           endfor
.       else
.           for my.state.state
.               output_state (state, 0)
.           endfor
.           for my.state.parallel
.               output_state (parallel, 1)
.           endfor
.       endif
.   else
.       output_actions (state)
.       for my.state.transition
.           output_transitions (my.state, transition)
.       endfor
.   endif
.   if !last ()
--
.   endif
.endmacro
.
.echo "Generating ../gen/$(file.basename(filename)).pu..."
.output "../gen/$(file.basename(filename)).pu"
.
@startuml

skinparam state {
  FontStyle bold
}

.if defined (scxml.name)
note "$(scxml.name) state diagram" as TITLENOTE
.endif

[*] -> $(scxml.initial)
.
.for scxml.state
.   output_state (state, 0)
.endfor
.for scxml.parallel
.   output_state (parallel, 1)
.endfor
@enduml

